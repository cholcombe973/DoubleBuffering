package buffering;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;

public class DoubleBuffer extends JFrame implements MouseMotionListener,ActionListener {
  private int mX,mY;
  private Image fadeInImage;
  private Timer t = new Timer(10,this);
  private BufferStrategy myStrategy;
  private native int GetCursorPosX();
  private native int GetCursorPosY();
  //private final int TRAIL = 10;
  //private MoveBuff[] moves= new MoveBuff[TRAIL];
  private Render r;
  private boolean started = false;

  private class MoveBuff{
    public Point pt;
    public double alpha;

    public MoveBuff(){
      pt = new Point();
    }
  }
  public DoubleBuffer(){
    super("Double Buffer v1.0",GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration());
    this.addKeyListener(new KeyListener(){
      public void keyTyped(KeyEvent e){
        if(e.getKeyChar() == (char)27){
          if(r!=null)
            r.setDone(true);
          System.exit(0);
        }
      }
      public void keyPressed(KeyEvent e){}
      public void keyReleased(KeyEvent e){}
    });
    /*
    for(int x = 0; x < TRAIL; x++){
      moves[x] = new MoveBuff();
      if(0==x){
        moves[x].pt.x = GetCursorPosX();
        moves[x].pt.y = GetCursorPosY();
        moves[x].alpha = (double).5 / (double)TRAIL;
      }
      else{
        moves[x].pt.x = moves[0].pt.x;
        moves[x].pt.y = moves[0].pt.y;
        moves[x].alpha = (double)(TRAIL-1-x) / (double)TRAIL;
      }
    }*/
    loadImage();
    addMouseMotionListener(this);
    GraphicsDevice screen = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();

    this.setResizable(false);
    this.setIgnoreRepaint(true);
    this.setDefaultLookAndFeelDecorated(false);
    this.setUndecorated(true);
    setVisible(true);

    //FULLSCREEN EXCLUSIVE
    screen.setFullScreenWindow(this);
    DisplayMode dm = new DisplayMode(1024,768,DisplayMode.BIT_DEPTH_MULTI,70);
    screen.setDisplayMode(dm);
    try{
      this.createBufferStrategy(2);
    }
    catch(IllegalArgumentException e){ System.out.println("IllegalArgumentException: " + e);}
    catch(IllegalStateException e){ System.out.println("IllegalStateException: " + e);}
    myStrategy = this.getBufferStrategy();
    t.start();
    r = new Render(myStrategy,this,fadeInImage,screen);
  }
  private void loadImage(){
    ImageIcon icon = new ImageIcon("JavaManBox.gif");
    fadeInImage = icon.getImage();
  }
  public void mouseMoved(MouseEvent me){
    mX = (int)me.getPoint().getX()+15;
    mY = (int)me.getPoint().getY()+15;
    if(r!=null){
      if(!started){
        r.start();
        started = true;
      }
      r.setPoints(mX,mY);
      r.moveBuff();
    }
/*
    for(int x = TRAIL-1; x > 0; x--){
      moves[x].pt.x = moves[x-1].pt.x;
      moves[x].pt.y = moves[x-1].pt.y;
    }
    moves[0].pt.x = mX;
    moves[0].pt.y = mY;
    renderingLoop();
*/
  }
  public void mouseDragged(MouseEvent me){
    mouseMoved(me);
  }
  /*
  public void renderingLoop(){  //this needs to be in a seperate thread and looping
    render(this.getBufferStrategy().getDrawGraphics());
  }
  public void render(Graphics g){
    GraphicsDevice screen = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
    int w = screen.getDisplayMode().getWidth();
    int h = screen.getDisplayMode().getHeight();
    Graphics2D g2 = (Graphics2D)g;
    g2.setColor(getBackground());
    g2.fillRect(0, 0, w, h);
    for(int x = TRAIL-1; x>=0;x--){
      Composite c = AlphaComposite.getInstance(AlphaComposite.SRC_OVER,(float)moves[x].alpha);
      g2.setComposite(c);
      g2.drawImage(fadeInImage,moves[x].pt.x - 50,moves[x].pt.y-50,null);
    }
    g2.dispose();
    this.getBufferStrategy().show();
  }
  */
  public void actionPerformed(ActionEvent ae){
    if(r!=null){
      if(!started){
        r.start();
        started = true;
      }
      r.actionTrail();
    }
    /*
    for(int x = TRAIL-1; x > 0; x--){
      moves[x].pt.x = moves[x-1].pt.x;
      moves[x].pt.y = moves[x-1].pt.y;
    }
    moves[0].pt.x = mX;
    moves[0].pt.y = mY;
    renderingLoop();
    */
  }
  public static void main(String[] args){
    new DoubleBuffer();
  }
  public int getCursorPosx(){
    return GetCursorPosX();
  }
  public int getCursorPosy(){
    return GetCursorPosY();
  }
  static{
    System.loadLibrary("CursorPos");
  }
}